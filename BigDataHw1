{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10896777,"sourceType":"datasetVersion","datasetId":6771669}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def get_factors(n):\n    arr = []\n    for i in range(2,n):\n        if n % i == 0:\n           arr.append(i)\n    return arr","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import csv\n\ndef open_file(data_file):\n    with open(data_file, newline='') as csvfile:\n        csvreader = csv.reader(csvfile)\n        arr_list = []\n        for row in csvreader:\n            try:\n                arr_list.append(int(row[0]))\n            except ValueError:\n                print(\"Error list empty\")\n    return arr_list\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for i in arr_list:\n    print(get_factors(i),'\\n')","metadata":{"trusted":true,"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Exercise 2","metadata":{}},{"cell_type":"code","source":"import time\n\ndef calculate_timing(func, *args, **kwargs):\n    start_time = time.time()\n    result = func(*args, **kwargs)\n    elapsed_time = time.time() - start_time\n    return result, elapsed_time","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def dataproc(dataset_path):\n    arr = open_file(dataset_path)\n    results = []\n    timings = []\n\n    for i in arr:\n        result, timing = calculate_timing(get_factors, i)\n        results.append(result)\n        timings.append(timing)\n    \n    return results, timings","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(data_proc('/kaggle/input/big-data/dataset_csv - Sheet1.csv'))\nprint(data_proc('/kaggle/input/big-data/dataset_exp_2.csv'))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Ex 1.3) Response time is a good performance metric, since we are dealing with computation of an algortihm\n\nEx 1.5) get_factors is compute intensive","metadata":{}},{"cell_type":"code","source":"# print(data_proc('/kaggle/input/big-data/user_dataset_exp_1.csv'))\n# print(data_proc('/kaggle/input/big-data/user_dataset_exp_2.csv'))\n# print(data_proc('/kaggle/input/big-data/user_dataset_exp_3.csv'))\n# print(data_proc('/kaggle/input/big-data/user_dataset_exp_4.csv'))\n# print(data_proc('/kaggle/input/big-data/user_dataset_exp_5.csv'))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def open_file_char(data_file):\n    with open(data_file, newline='') as csvfile:\n        csvreader = csv.reader(csvfile)\n        arr_list = []\n        for row in csvreader:\n            try:\n                arr_list.append(row[0])\n            except ValueError:\n                print(\"Error list empty\")\n    return arr_list","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def ufilter(data_path, char):\n    arr_list = open_file_char(data_path)\n    list_of_char_words = []\n\n    def filter_logic(): \n        filtered_words = []\n        for i in arr_list:\n            if i[0] == char:\n                filtered_words.append(i)\n        return filtered_words\n\n    list_of_char_words, timing = calculate_timing(filter_logic)\n    print(f\"Filtering Time: {timing:.6f} seconds\")\n\n    return list_of_char_words","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# print(ufilter('/kaggle/input/big-data/user_dataset_exp_1.csv','a'))\n# print(ufilter('/kaggle/input/big-data/user_dataset_exp_2.csv','a'))\n# print(ufilter('/kaggle/input/big-data/user_dataset_exp_3.csv','a'))\n# print(ufilter('/kaggle/input/big-data/user_dataset_exp_4.csv','a'))\n# print(ufilter('/kaggle/input/big-data/user_dataset_exp_5.csv','a'))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Ex2.3) ufilter is data intensive as there can be thousands of words that need to be checked for a given character, since the algo is simple to just compare the chars, it is therefore data intensive\n\nEx2.4) Yes, but it is complicated the data would need to be streamed instead of loading it into memory sort of like a pipeline","metadata":{}}]}